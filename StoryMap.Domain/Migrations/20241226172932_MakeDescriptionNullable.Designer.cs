// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoryMap.Domain.Persistence;

#nullable disable

namespace StoryMap.Domain.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241226172932_MakeDescriptionNullable")]
    partial class MakeDescriptionNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("StoryMap.Domain.Entities.ChapterEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedOnUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.ToTable("Chapters", (string)null);
                });

            modelBuilder.Entity("StoryMap.Domain.Entities.CharacterEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedOnUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.ToTable("Characters", (string)null);
                });

            modelBuilder.Entity("StoryMap.Domain.Entities.DetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedOnUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("TextKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TextValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeframeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("TimeframeId");

                    b.ToTable("Details", (string)null);
                });

            modelBuilder.Entity("StoryMap.Domain.Entities.ImageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedOnUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("MapId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Rotation")
                        .HasColumnType("REAL");

                    b.Property<float>("Scale")
                        .HasColumnType("REAL");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("TEXT");

                    b.Property<float>("X")
                        .HasColumnType("REAL");

                    b.Property<float>("Y")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("StoryMap.Domain.Entities.MapEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedOnUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("StoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.ToTable("Maps", (string)null);
                });

            modelBuilder.Entity("StoryMap.Domain.Entities.StoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedOnUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Stories", (string)null);
                });

            modelBuilder.Entity("StoryMap.Domain.Entities.TimeframeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChapterId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedOnUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("Timeframes", (string)null);
                });

            modelBuilder.Entity("StoryMap.Domain.Entities.ChapterEntity", b =>
                {
                    b.HasOne("StoryMap.Domain.Entities.StoryEntity", "Story")
                        .WithMany("Chapters")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");
                });

            modelBuilder.Entity("StoryMap.Domain.Entities.CharacterEntity", b =>
                {
                    b.HasOne("StoryMap.Domain.Entities.StoryEntity", "Story")
                        .WithMany("Characters")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");
                });

            modelBuilder.Entity("StoryMap.Domain.Entities.DetailEntity", b =>
                {
                    b.HasOne("StoryMap.Domain.Entities.CharacterEntity", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoryMap.Domain.Entities.TimeframeEntity", "Timeframe")
                        .WithMany("Details")
                        .HasForeignKey("TimeframeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Timeframe");
                });

            modelBuilder.Entity("StoryMap.Domain.Entities.ImageEntity", b =>
                {
                    b.HasOne("StoryMap.Domain.Entities.MapEntity", "Map")
                        .WithMany("Images")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("StoryMap.Domain.Entities.MapEntity", b =>
                {
                    b.HasOne("StoryMap.Domain.Entities.StoryEntity", "Story")
                        .WithMany("Maps")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");
                });

            modelBuilder.Entity("StoryMap.Domain.Entities.TimeframeEntity", b =>
                {
                    b.HasOne("StoryMap.Domain.Entities.ChapterEntity", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("StoryMap.Domain.Entities.MapEntity", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("StoryMap.Domain.Entities.StoryEntity", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Characters");

                    b.Navigation("Maps");
                });

            modelBuilder.Entity("StoryMap.Domain.Entities.TimeframeEntity", b =>
                {
                    b.Navigation("Details");
                });
#pragma warning restore 612, 618
        }
    }
}
